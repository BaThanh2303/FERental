import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Paper, 
  Typography, 
  LinearProgress, 
  Chip,
  Alert,
  Button
} from '@mui/material';
import { 
  CheckCircle, 
  AccessTime, 
  DirectionsCar, 
  Warning,
  QrCodeScanner
} from '@mui/icons-material';

export default function RentalStatusTracker({ 
  rental, 
  onScanQR 
}) {
  const [timeRemaining, setTimeRemaining] = useState(null);
  const [progress, setProgress] = useState(0);

  useEffect(() => {
    // CH·ªà t√≠nh th·ªùi gian khi status l√† ACTIVE v√† c√≥ startTime
    // Override: Kh√¥ng t√≠nh th·ªùi gian n·∫øu status l√† PAID (d√π backend c√≥ set startTime)
    if (!rental || rental.status !== 'ACTIVE' || !rental.startTime || !rental.rentalPackage) {
      setTimeRemaining(null);
      setProgress(0);
      return;
    }

    // Ki·ªÉm tra th√™m: N·∫øu status l√† PAID th√¨ kh√¥ng t√≠nh th·ªùi gian (d√π c√≥ startTime)
    if (rental.status === 'PAID') {
      setTimeRemaining(null);
      setProgress(0);
      return;
    }

    const updateTimer = () => {
      const startTime = new Date(rental.startTime);
      const now = new Date();
      const duration = rental.rentalPackage.duration * 60 * 60 * 1000; // Convert hours to ms
      const elapsed = now - startTime;
      const remaining = duration - elapsed;

      if (remaining > 0) {
        setTimeRemaining(remaining);
        setProgress((elapsed / duration) * 100);
      } else {
        setTimeRemaining(0);
        setProgress(100);
      }
    };

    updateTimer();
    const interval = setInterval(updateTimer, 1000);

    return () => clearInterval(interval);
  }, [rental]);

  const formatTime = (ms) => {
    const hours = Math.floor(ms / (1000 * 60 * 60));
    const minutes = Math.floor((ms % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((ms % (1000 * 60)) / 1000);
    
    if (hours > 0) {
      return `${hours}h ${minutes}m ${seconds}s`;
    } else if (minutes > 0) {
      return `${minutes}m ${seconds}s`;
    } else {
      return `${seconds}s`;
    }
  };

  const getStatusInfo = () => {
    switch (rental.status) {
      case 'PENDING':
        return {
          color: '#ff9800',
          icon: <AccessTime />,
          text: 'Ch·ªù thanh to√°n',
          description: 'Vui l√≤ng thanh to√°n ƒë·ªÉ ti·∫øp t·ª•c'
        };
      case 'PAID':
        return {
          color: '#ff9800',
          icon: <QrCodeScanner />,
          text: 'CH·ªú S·ª¨ D·ª§NG',
          description: 'Thanh to√°n th√†nh c√¥ng! ƒê·∫øn tr·∫°m v√† qu√©t QR tr√™n xe ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng'
        };
      case 'ACTIVE':
        return {
          color: '#2196f3',
          icon: <DirectionsCar />,
          text: 'ƒêANG S·ª¨ D·ª§NG',
          description: 'B·∫°n ƒëang s·ª≠ d·ª•ng xe. Th·ªùi gian ƒë√£ b·∫Øt ƒë·∫ßu t√≠nh t·ª´ khi qu√©t QR l·∫•y xe.'
        };
      case 'COMPLETED':
        return {
          color: '#9e9e9e',
          icon: <CheckCircle />,
          text: 'Ho√†n th√†nh',
          description: 'ƒê√£ tr·∫£ xe th√†nh c√¥ng'
        };
      default:
        return {
          color: '#666',
          icon: <AccessTime />,
          text: rental.status,
          description: 'Tr·∫°ng th√°i kh√¥ng x√°c ƒë·ªãnh'
        };
    }
  };

  const statusInfo = getStatusInfo();

  return (
    <Paper sx={{ 
      p: 3, 
      bgcolor: '#111', 
      border: '1px solid #333', 
      borderRadius: 2,
      mb: 2
    }}>
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
        <Box sx={{ color: statusInfo.color, mr: 1 }}>
          {statusInfo.icon}
        </Box>
        <Typography variant="h6" sx={{ color: 'white', flex: 1 }}>
          Tr·∫°ng th√°i thu√™ xe
        </Typography>
        <Chip 
          label={statusInfo.text}
          sx={{ 
            bgcolor: statusInfo.color, 
            color: 'white',
            fontWeight: 'bold'
          }}
        />
      </Box>

      <Typography variant="body2" sx={{ color: '#aaa', mb: 3 }}>
        {statusInfo.description}
      </Typography>

      {/* Th√¥ng tin th·ªùi gian cho status PAID */}
      {rental.status === 'PAID' && rental.rentalPackage && (
        <Box sx={{ mb: 3, p: 2, bgcolor: '#222', borderRadius: 1, border: '1px solid #444' }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
            <QrCodeScanner sx={{ color: '#ff9800' }} />
            <Typography variant="body2" sx={{ color: '#ff9800', fontWeight: 'bold' }}>
              Qu√©t QR tr√™n xe ƒë·ªÉ b·∫Øt ƒë·∫ßu
            </Typography>
          </Box>
          <Typography variant="body2" sx={{ color: '#4caf50', fontWeight: 'bold', mb: 1 }}>
            ‚è∞ Th·ªùi gian s·ª≠ d·ª•ng: {rental.rentalPackage.duration} gi·ªù
          </Typography>
          <Typography variant="body2" sx={{ color: '#aaa', mb: 1 }}>
            Th·ªùi gian s·∫Ω b·∫Øt ƒë·∫ßu t√≠nh t·ª´ khi b·∫°n qu√©t QR l·∫•y xe
          </Typography>
          <Typography variant="body2" sx={{ color: '#ff0000', fontWeight: 'bold', mb: 1 }}>
            üöó Xe ƒë√£ ƒë·∫∑t: {rental.vehicle?.name || rental.vehicle?.code} 
          </Typography>
          <Typography variant="body2" sx={{ color: '#ff9800', fontWeight: 'bold' }}>
            ‚ö†Ô∏è Vui l√≤ng qu√©t QR code tr√™n xe ƒë√∫ng ƒë·ªÉ tr√°nh nh·∫ßm l·∫´n!
          </Typography>
          {rental.startTime && (
            <Alert severity="info" sx={{ bgcolor: 'rgba(33,150,243,0.1)', color: '#2196f3' }}>
              <Typography variant="body2">
                <strong>L∆∞u √Ω:</strong> Th·ªùi gian ch∆∞a b·∫Øt ƒë·∫ßu t√≠nh. Ch·ªâ khi qu√©t QR l·∫•y xe m·ªõi b·∫Øt ƒë·∫ßu t√≠nh th·ªùi gian s·ª≠ d·ª•ng.
              </Typography>
            </Alert>
          )}
        </Box>
      )}

      {/* Th√¥ng tin cho status ACTIVE */}
      {rental.status === 'ACTIVE' && rental.rentalPackage && (
        <Box sx={{ mb: 3, p: 2, bgcolor: '#222', borderRadius: 1, border: '1px solid #444' }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
            <DirectionsCar sx={{ color: '#2196f3' }} />
            <Typography variant="body2" sx={{ color: '#2196f3', fontWeight: 'bold' }}>
              ƒêang s·ª≠ d·ª•ng xe
            </Typography>
          </Box>
          <Typography variant="body2" sx={{ color: '#aaa', mb: 1 }}>
            Th·ªùi gian ƒë√£ b·∫Øt ƒë·∫ßu t√≠nh t·ª´ khi qu√©t QR l·∫•y xe
          </Typography>
          {rental.startTime && (
            <Typography variant="body2" sx={{ color: '#ff9800', fontWeight: 'bold' }}>
              ‚è∞ K·∫øt th√∫c d·ª± ki·∫øn: {(() => {
                const startTime = new Date(rental.startTime);
                const durationHours = rental.rentalPackage.duration;
                const endTime = new Date(startTime.getTime() + (durationHours * 60 * 60 * 1000));
                return endTime.toLocaleString('vi-VN', {
                  month: '2-digit',
                  day: '2-digit',
                  hour: '2-digit',
                  minute: '2-digit'
                });
              })()}
            </Typography>
          )}
        </Box>
      )}

      {/* Progress Bar for Active Rental */}
      {rental.status === 'ACTIVE' && timeRemaining !== null && (
        <Box sx={{ mb: 3 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
            <Typography variant="body2" sx={{ color: '#aaa' }}>
              Th·ªùi gian c√≤n l·∫°i
            </Typography>
            <Typography variant="body2" sx={{ color: timeRemaining < 30 * 60 * 1000 ? '#ff0000' : 'white' }}>
              {formatTime(timeRemaining)}
            </Typography>
          </Box>
          
          <LinearProgress 
            variant="determinate" 
            value={progress} 
            sx={{
              height: 8,
              borderRadius: 4,
              bgcolor: '#333',
              '& .MuiLinearProgress-bar': {
                bgcolor: progress > 90 ? '#ff0000' : progress > 70 ? '#ff9800' : '#4caf50'
              }
            }}
          />
          
          {timeRemaining < 30 * 60 * 1000 && timeRemaining > 0 && (
            <Alert 
              severity="warning" 
              sx={{ 
                mt: 2, 
                bgcolor: 'rgba(255,152,0,0.1)', 
                color: '#ff9800' 
              }}
            >
              S·∫Øp h·∫øt th·ªùi gian! Vui l√≤ng chu·∫©n b·ªã tr·∫£ xe.
            </Alert>
          )}
          
          {timeRemaining <= 0 && (
            <Alert 
              severity="error" 
              sx={{ 
                mt: 2, 
                bgcolor: 'rgba(244,67,54,0.1)', 
                color: '#f44336' 
              }}
            >
              ƒê√£ h·∫øt th·ªùi gian thu√™! Vui l√≤ng tr·∫£ xe ngay.
            </Alert>
          )}
        </Box>
      )}

      {/* Action Buttons */}
      {rental.status === 'PAID' && (
        <Button
          fullWidth
          variant="contained"
          onClick={onScanQR}
          startIcon={<QrCodeScanner />}
          sx={{
            bgcolor: '#ff9800',
            color: 'white',
            fontWeight: 'bold',
            py: 1.5,
            '&:hover': { bgcolor: '#f57c00' }
          }}
        >
          Qu√©t QR tr√™n xe ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng
        </Button>
      )}

      {rental.status === 'ACTIVE' && (
        <Box>
          {/* Return Info */}
          <Box sx={{ mb: 2, p: 2, bgcolor: '#222', borderRadius: 1, border: '1px solid #444' }}>
            <Typography variant="body2" sx={{ color: '#2196f3', fontWeight: 'bold', mb: 1 }}>
              üìç Tr·∫£ xe
            </Typography>
            <Typography variant="body2" sx={{ color: '#4caf50', fontWeight: 'bold' }}>
              ‚úÖ Qu√©t QR code t·∫°i tr·∫°m ƒë·ªÉ tr·∫£ xe
            </Typography>
            <Typography variant="body2" sx={{ color: '#aaa', fontSize: '0.8rem', mt: 1 }}>
              Xe s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o tr·∫°m t∆∞∆°ng ·ª©ng v·ªõi QR code b·∫°n qu√©t
            </Typography>
          </Box>
          
          <Button
            fullWidth
            variant="contained"
            onClick={onScanQR}
            startIcon={<QrCodeScanner />}
            sx={{
              bgcolor: '#2196f3',
              color: 'white',
              fontWeight: 'bold',
              py: 1.5,
              '&:hover': { bgcolor: '#1976d2' }
            }}
          >
            Qu√©t QR t·∫°i tr·∫°m ƒë·ªÉ tr·∫£ xe
          </Button>
        </Box>
      )}
    </Paper>
  );
}
